@using OrchardCore.Flows.ViewModels;

@model BagPartEditViewModel

@inject OrchardCore.ContentManagement.IContentManager ContentManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetTemplatePlaceholderId = Html.Id("widgetTemplatePlaceholder");
}

<script asp-name="jQuery-ui" at="Foot"></script>

<fieldset class="form-group">
    <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder">
        @{ var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }
        @foreach (var widget in Model.BagPart.ContentItems)
        {
            var prefix = Guid.NewGuid().ToString("n");
            <div class="widget-template">
                @{
                    dynamic widgetEditor = await ContentItemDisplayManager.BuildEditorAsync(widget, Model.Updater, false, "", prefix);

                    widgetEditor.PrefixesName = Html.NameFor(x => x.Prefixes);
                    widgetEditor.ContentTypesName = Html.NameFor(x => x.ContentTypes);
                    widgetEditor.TargetId = widgetTemplatePlaceholderId;

                    widgetEditor.Metadata.Alternates.Add("Widget_Edit__Bag");
                }

                @await DisplayAsync(widgetEditor)

                @{ this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix; }
                <input type="hidden" asp-for="Prefixes" value="@prefix" />
                <input type="hidden" asp-for="ContentTypes" value="@widget.ContentType" />
            </div>
        }
    </div>

    <div class="btn-group ">
        <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @T["Add Item"]
        </button>
        <div class="dropdown-menu">
            @foreach (var type in Model.ContainedContentTypeDefinitions)
            {
                <a class="dropdown-item add-widget  btn-sm"
                   data-target-id="@widgetTemplatePlaceholderId"
                   data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
                   data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
                   data-widget-type="@type.Name"
                   data-flowmetadata="false"
                   href="javascript:;">@type.DisplayName</a>
            }
        </div>
    </div>


    @* Rendered only once in case multiple BagPart (or FlowPart) are on the page *@
    @if (Context.Items["BagPart.Edit"] == null)
    {
        Context.Items["BagPart.Edit"] = new object();
        <input type="hidden" id="buildEditorUrl" value="@Url.Action("BuildEditor", "Admin", new { area = "OrchardCore.Flows" })" />

        <script asp-src="~/OrchardCore.Flows/Scripts/flows.edit.js" at="Foot" depends-on="admin"></script>
        <style asp-src="~/OrchardCore.Widgets/Styles/widgetslist.edit.css"></style>
        <style asp-src="~/OrchardCore.Flows/Styles/flows.edit.css"></style>
    }

    @* Rendered only once per type to initialize the scripts its editor will need *@
    @foreach (var type in Model.ContainedContentTypeDefinitions)
    {
        @if (Context.Items["BagPart.Edit:" + type.Name] == null)
        {
            Context.Items["BagPart.Edit:" + type.Name] = new object();

            // Render a mock widget so that its resources are included in the page
            var contentItem = await ContentManager.NewAsync(type.Name);
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, true, "", Guid.NewGuid().ToString("n")));
        }
    }

    <script at="Foot">
        $("#@widgetTemplatePlaceholderId").sortable({
            handle: ".widget-editor-header",
            cursor: "move",
            stop: function (event, ui) {
                $(document).trigger('contentpreview:render');
            }
        });
    </script>
</fieldset>