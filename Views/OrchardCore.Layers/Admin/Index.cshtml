@using System.Globalization;
@using OrchardCore.ContentManagement.Metadata.Settings;
@using OrchardCore.Layers.Drivers
@model OrchardCore.Layers.ViewModels.LayersIndexViewModel

@inject IContentManager ContentManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == "Widget");
    var categories = widgetContentTypes.SelectMany(x => (x.Settings.ContainsKey("Category") ? x.Settings["Category"].ToString() : string.Empty).Split(',')).Where(x => !string.IsNullOrWhiteSpace(x)).Distinct().OrderBy(x => x);
}
<script asp-name="jquery-ui" at="Foot"></script>
<style asp-src="~/Etch.OrchardCore.AdminTheme/Styles/flows.edit.css" asp-append-version="true"></style>
<script asp-src="~/Etch.OrchardCore.AdminTheme/Scripts/widget-picker.js" at="Foot" depends-on="admin" asp-append-version="true"></script>

<h1>@RenderTitleSegments(T["Edit Widgets and Layers"])</h1>

<form id="undo-form" asp-action="UpdatePosition" method="post">
    <div id="layer-undo-message" class="alert alert-success alert-dismissible show d-none" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @T["Widget successfully moved. <a href=\"javascript:console.log('submit');$('#undo-form').submit();\"><strong>Undo</strong></a>."]
    </div>
    <input id="layer-undo-message-contentItemId" type="hidden" name="contentItemId" value="" />
    <input id="layer-undo-message-zone" type="hidden" name="zone" value="" />
    <input id="layer-undo-message-position" type="hidden" name="position" value="" />
</form>

<div class="row">
    <div class="col-md-8">
        <h3>@T["Zones"]</h3>
        <form asp-action="Index">
            @if (Model.Zones == null || !Model.Zones.Any())
            {
                <p class="alert alert-warning">@T["Please <a href=\"{0}\">define the available zones</a> before adding Widgets", Url.Action("Index", "Admin", new { area = "OrchardCore.Settings", groupId = LayerSiteSettingsDisplayDriver.GroupId })]</p>
            }
            else
            {
                foreach (var zone in Model.Zones)
                {
                    var widgetTemplatePlaceholderId = Guid.NewGuid().ToString("n");
                    double maxPosition = 0;

                    <div class="card form-group">
                        <div class="card-header text-muted">
                            @zone
                        </div>
                        <div class="layer-zone card-body" data-zone="@zone">
                            <div class="form-group">
                                <ul class="list-group zones">
                                    @if (Model.Widgets.ContainsKey(zone))
                                    {
                                        foreach (var contentItemSummary in Model.Widgets[zone])
                                        {
                                            contentItemSummary.Meta.Add(Html.Raw("<span class=\"badge badge-info\"><i class=\"fa fa-bookmark-o\" aria-hidden=\"true\"></i> " + contentItemSummary.ContentItem.Content.LayerMetadata.Layer + "</span>"));

                                            maxPosition = Math.Max(maxPosition, (double)contentItemSummary.ContentItem.Content.LayerMetadata.Position);
                                            <li class="list-group-item">
                                                <div class="properties cursor-move">
                                                    @await DisplayAsync(contentItemSummary)
                                                </div>
                                                <input type="hidden"
                                                       class="layer-metadata"
                                                       data-zone="@zone"
                                                       data-layer="@contentItemSummary.ContentItem.Content.LayerMetadata.Layer"
                                                       data-position="@contentItemSummary.ContentItem.Content.LayerMetadata.Position.ToString(CultureInfo.InvariantCulture)"
                                                       data-content-item-id="@contentItemSummary.ContentItem.ContentItemId" />
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>

                            <div class="btn-group">
                                <button id="@widgetTemplatePlaceholderId-add-widget-btn" type="button" title="@T["Add Widget"]" class="btn btn-primary btn-sm js-add-widget" data-toggle="modal" data-target="#widget-picker-@widgetTemplatePlaceholderId" data-picker-title="@T["Available Widgets"]" aria-haspopup="true" aria-expanded="false">
                                    @T["Add Widget"]
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade modal-widgets" id="widget-picker-@widgetTemplatePlaceholderId" tabindex="-1" role="dialog" aria-labelledby="widget-picker-label" aria-hidden="true">
                        <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="activity-picker-label">@T["Available Widgets"]</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-sm-3 col-md-3 col-lg-2">
                                            <div class="form-group">
                                                <input class="form-control mb-3" type="search" placeholder="@T["Filter"]" aria-label="@T["Filter"]" autofocus>
                                            </div>
                                            <ul class="nav nav-pills flex-column widget-picker-categories">
                                                <li class="nav-item">
                                                    <a class="nav-link @(categories.Any(x => x == "Common") ? "" : "active")" href="#all" data-toggle="pill">All</a>
                                                </li>

                                                @foreach (var category in categories)
                                                {
                                                    <li class="nav-item" data-category="@category.HtmlClassify()">
                                                        <a class="nav-link @(category == "Common" ? "active" : "")" href="#@category.HtmlClassify()" data-toggle="pill">@category</a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                        <div class="col-sm-9 col-md-9 col-lg-10">
                                            <div class="card-columns tab-content">
                                                @foreach (var type in widgetContentTypes.OrderBy(x => x.DisplayName))
                                                {
                                                    var contentItem = await ContentManager.NewAsync(type.Name);
                                                    var createRoute = (await ContentManager.PopulateAspectAsync<ContentItemMetadata>
                                                        (contentItem)).CreateRouteValues;
                                                    createRoute["returnUrl"] = Context.Request.PathBase + Context.Request.Path;
                                                    createRoute["LayerMetadata.Zone"] = zone;
                                                    createRoute["LayerMetadata.Position"] = maxPosition + 1;
                                                    <div class="card widget js-flow-widget" data-category="@type.Settings["Category"]?.ToString().HtmlClassify()" style="">
                                                        <div class="card-body">
                                                            <h4 class="card-title"><i class="fa fa-@type.Settings["Icon"]?.ToString()"></i> @type.DisplayName</h4>
                                                            <p>@type.Settings["Description"]</p>
                                                        </div>
                                                        <div class="card-footer text-muted text-xs-right">
                                                            <a class="btn btn-primary btn-sm add-widget"
                                                               data-widget-type="@type.Name"
                                                               data-zone="@zone"
                                                               href="@Url.Action((string)createRoute["Action"], (string)createRoute["controller"], createRoute)">@T["Add"]</a>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@T["Cancel"]</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <script at="Foot">

                    $('#@widgetTemplatePlaceholderId-add-widget-btn').on('click', function () {
                        window.displayPicker($('#widget-picker-@widgetTemplatePlaceholderId')[0]);
                    });

                    </script>
                }
            }
        </form>
    </div>
    <div class="col-md-4 col-md-pull-right">
        <h3>@T["Layers"]</h3>
        <p>
            <span class="hint">@T["Select a layer to reveal its associated widgets."]</span>
        </p>
        <div class="form-group">
            <ul class="list-group">
                @foreach (var layer in Model.Layers)
                {
                    <li class="list-group-item">
                        <div class="properties">
                            <div class="d-flex flex-wrap">
                                <div class="custom-control custom-checkbox mr-auto flex-grow-1">
                                    <input type="checkbox" class="custom-control-input layer-check" id="@layer.Name" value="@layer.Name">
                                    <label class="custom-control-label" for="@layer.Name">@layer.Name</label>
                                </div>
                                <div>
                                    <a class="btn btn-primary btn-sm" href="@Url.Action("Edit", "Admin", new { area = "OrchardCore.Layers", name = layer.Name })">@T["Edit"]</a>
                                    <a class="btn btn-danger btn-sm" href="@Url.Action("Delete", "Admin", new { area = "OrchardCore.Layers", name = layer.Name })" itemprop="RemoveUrl UnsafeUrl">@T["Delete"]</a>
                                </div>
                            </div>
                            <div>
                                <span class="hint">@layer.Description</span>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
        @if (!Model.Layers.Any())
        {
            <p class="alert alert-warning">@T["Please <a href=\"{0}\">create a layer</a> before adding Widgets", Url.Action("Create", "Admin", new { area = "OrchardCore.Layers" })]</p>
        }

        <a class="button btn-sm" href="@Url.Action("Create", "Admin", new { area = "OrchardCore.Layers" })">@T["Add"]</a>
    </div>
</div>

<script at="Foot">
    $(".list-group.zones").sortable({
        handle: ".properties",
        cursor: "move",
        connectWith: '.list-group',
        stop: function (event, ui) {
            var newZone = ui.item.closest('.layer-zone').data("zone");
            var metadata = ui.item.find('.layer-metadata')
            var currentPosition = Number(metadata.data("position"));
            var item = ui.item.closest('.list-group-item');
            var previous = item.prev('.list-group-item').find('.layer-metadata');
            var next = item.next('.list-group-item').find('.layer-metadata');
            var contentItemId = metadata.data("content-item-id");

            var newPosition = currentPosition;

            if (previous.length == 0 && next.length == 0) {
                // we can keep the current position
            }
            else if (previous.length == 0 && next.length > 0) {
                // first in the list
                newPosition = Number(next.data("position") || 0) - 1;
            }
            else if (previous.length > 0 && next.length == 0) {
                // last in the list
                newPosition = Number(previous.data("position") || 0) + 1;
            }
            else {
                newPosition = (Number(previous.data("position") || 0) + Number(next.data("position") || 0)) / 2;
            }

            var currentZone = metadata.data("zone");
            var currentPosition = metadata.data("position");

            metadata.data("zone", newZone);
            metadata.data("position", newPosition);

            var url = "@Url.Action("UpdatePosition", "Admin", new { area = "OrchardCore.Layers" })" + "?" + "contentItemId=" + encodeURIComponent(contentItemId) + "&position=" + encodeURIComponent(newPosition) + "&zone=" + encodeURIComponent(newZone);
            var antiforgerytoken = $("[name='__RequestVerificationToken']").val();

            $.post(url, { "__RequestVerificationToken": antiforgerytoken })
                .done(function () {
                    console.log('done');
                    $('#layer-undo-message').removeClass("d-none");
                    $('#layer-undo-message-contentItemId').val(contentItemId);
                    $('#layer-undo-message-position').val(currentPosition);
                    $('#layer-undo-message-zone').val(currentZone);
                })
                .fail(function () {
                    console.log('failed');
                    $('#layer-undo-message').addClass("d-none");
                })
            ;
        }
    });

    $('.layer-check').on('click', function () {
        $('.list-group-item').removeClass('list-group-item-success');
        $('.layer-check:checked').each(function () {
            var layer = $(this).val();
            $('[data-layer="' + layer + '"]').closest('.list-group-item').addClass('list-group-item-success');
        });
    });
                    </script>
