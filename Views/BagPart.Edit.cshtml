@using OrchardCore.ContentManagement.Metadata.Settings;
@using OrchardCore.Flows.Models;
@using OrchardCore.Flows.ViewModels;
@using OrchardCore.Mvc.Utilities;

@model BagPartEditViewModel

@inject IContentManager ContentManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetTemplatePlaceholderId = Html.Id("widgetTemplatePlaceholder");
    var parentContentType = Model.BagPart.ContentItem.ContentType;
    string partName = ((dynamic)Model).Metadata.Name;
}

<script asp-name="jQuery-ui" at="Foot"></script>

<div class="form-group">
    <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder widget-template-placeholder-bagpart bagpart-@partName.HtmlClassify() row mx-0" data-buildeditorurl="@Url.Action("BuildEditor", "Admin", new { area = "OrchardCore.Flows" })">
        @{ var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }
        @foreach (var widget in Model.BagPart.ContentItems)
        {
            //Create a Card Shape
            dynamic contentCard = await New.ContentCard(
                // FOR Updater
                CollectionShape: Model,
                //Shape Specific
                CollectionShapeType: nameof(BagPart),
                ContentItem: widget,
                BuildEditor: true,
                ParentContentType: parentContentType,
                CollectionPartName :partName,
                //Card Specific Properties
                TargetId: widgetTemplatePlaceholderId,
                Inline: false,
                CanMove: true,
                CanDelete: true,
                //Input hidden
                //Prefixes
                PrefixValue: widget.ContentItemId,
                HtmlFieldPrefix: htmlFieldPrefix,
                PrefixesId: Html.IdFor(x => x.Prefixes),
                PrefixesName: Html.NameFor(x => x.Prefixes),
                //Content Types
                ContentTypesId: Html.IdFor(x => x.ContentTypes),
                ContentTypesName: Html.NameFor(x => x.ContentTypes)
            );
            @await DisplayAsync(contentCard)
        }
    </div>

    <div class="btn-group ">
        <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @T["Add Item"]
        </button>
        <div class="dropdown-menu">
            @foreach (var type in Model.ContainedContentTypeDefinitions)
            {
                <a class="dropdown-item add-widget  btn-sm"
                   data-target-id="@widgetTemplatePlaceholderId"
                   data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
                   data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
                   data-widget-type="@type.Name"
                   data-flowmetadata="false"
                   data-parent-content-type="@parentContentType"
                   data-part-name="@partName"
                   href="javascript:;">@type.DisplayName</a>
            }
        </div>
    </div>

    @* Rendered only once in case multiple BagPart (or FlowPart) are on the page *@
    @if (Context.Items["BagPart.Edit"] == null)
    {
        Context.Items["BagPart.Edit"] = new object();
        <script asp-src="~/OrchardCore.Flows/Scripts/flows.edit.min.js"
            debug-src="~/OrchardCore.Flows/Scripts/flows.edit.js" at="Foot" depends-on="admin"></script>
        <style asp-src="~/OrchardCore.Widgets/Styles/widgetslist.edit.min.css"
            debug-src="~/OrchardCore.Widgets/Styles/widgetslist.edit.css"></style>
        <style asp-src="~/OrchardCore.Flows/Styles/flows.edit.min.css"
            debug-src="~/OrchardCore.Flows/Styles/flows.edit.css"></style>
        <style asp-src="~/Etch.OrchardCore.AdminTheme/Styles/flows.edit.css" asp-append-version="true"></style>
    }

    @* Rendered only once per type to initialize the scripts its editor will need *@
    @foreach (var type in Model.ContainedContentTypeDefinitions)
    {
        @if (Context.Items["BagPart.Edit:" + type.Name] == null)
        {
            Context.Items["BagPart.Edit:" + type.Name] = new object();

            // Render a mock widget so that its resources are included in the page
            var contentItem = await ContentManager.NewAsync(type.Name);
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, true, "", Guid.NewGuid().ToString("n")));
        }
    }

    <script at="Foot">
    @*Only apply sortable if element is present in dom, do not call sortable on scripts for mock widgets *@
    if ($('#@widgetTemplatePlaceholderId').length == 1) {
        $("#@widgetTemplatePlaceholderId").sortable({
            handle: ".widget-editor-handle",
            cursor: "move",
            opacity: 0.7,
            tolerance: "pointer",
            placeholder: {
                element: function(currentItem) {
                    return $('<div class="widget-dragdrop-placeholder"><div></div></div>')[0];
                },
                update: function (container, p) {
                    return;
                }
            },
            toleranceElement: '> div',
            start: function (event, ui) {
                widgetDragItem = ui.item;
                lastContainer = ui.item.parent();
                lastContainer.toggleClass('widget-dropzone-hint');
                widgetDragItem.find('.card').first().toggleClass('border-primary');
                var classList = widgetDragItem.attr('class').split(' ');
                $.each(classList, function (id, item) {
                    if (item.indexOf('col-md-') === 0) ui.placeholder.addClass(item);
                });
            },
            stop: function (event, ui) {
                lastContainer.toggleClass('widget-dropzone-hint');
                widgetDragItem.find('.card').first().toggleClass('border-primary');
                //clear the global variables
                widgetDragItem = null;
                lastContainer = null;
                widgetItemSourceId = null;
                widgetItemDestId = null;
                $(document).trigger('contentpreview:render');
            },
            over: function (event, ui) {
                var $self = $(this);
                if (lastContainer[0] != this) {
                    lastContainer.toggleClass('widget-dropzone-hint');
                    lastContainer = $self;
                    $self.toggleClass('widget-dropzone-hint');
                }
            }
        });
    }
    </script>
</div>